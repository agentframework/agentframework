import { Attribute } from '../Attribute';
import { AgentTypeInvocation } from './Invocation/AgentTypeInvocation';
import { ClassTypeInvocation } from './Invocation/ClassTypeInvocation';
import { OnDemandInterceptorFactory } from './OnDemandInterceptorFactory';
import { TypeInvocation } from '../TypeInvocations';
import { PropertyInfo } from '../Reflection/PropertyInfo';
import { Invocation } from '../Invocation';
import { TypeInfo } from '../Reflection/TypeInfo';
import { OnDemandParameterInterceptor } from './Interceptor/OnDemandParameterInterceptor';
import { CONSTRUCTOR } from '../WellKnown';
import { OnDemandTypeInfo } from '../Reflection/OnDemandTypeInfo';
import { ClassConstructorState } from '../Knowledges/ClassConstructors';

export class OnDemandInvocationFactory {
  /**
   * this function output is NOT cached
   * the type generated by this chain is been CACHED by domain
   *
   * @internal
   */
  static createAgentInvocation(target: Function, attribute: Attribute): TypeInvocation {
    const design: TypeInfo = OnDemandTypeInfo.find(target);
    const ctor = design.property(CONSTRUCTOR);
    let chain: Invocation<TypeInfo> = new AgentTypeInvocation(target, design);
    chain = OnDemandInterceptorFactory.addInterceptor(chain, attribute);
    chain = OnDemandInterceptorFactory.addInterceptors(chain, ctor.ownInterceptors);
    return chain;
  }

  /**
   * this chain is been cached by caller
   *
   * @internal
   */
  static createConstructorInvocation(target: Function): ClassConstructorState {
    const design = OnDemandTypeInfo.find(target.prototype);
    const ctor = design.property(CONSTRUCTOR);
    let chain: Invocation<TypeInfo> = new ClassTypeInvocation(target, design);
    if (ctor.hasParameter()) {
      chain = OnDemandInterceptorFactory.addInterceptor(chain, new OnDemandParameterInterceptor(ctor));
    }
    chain = OnDemandInterceptorFactory.addInterceptors(chain, ctor.ownInterceptors);
    return { invocation: chain, version: ctor.version, design: ctor };
  }

  /**
   * @internal
   */
  static createPropertyInvocation<T extends PropertyInfo>(
    invocation: Invocation<T>,
    property: PropertyInfo
  ): Invocation<T> {
    let chain = invocation;
    chain = OnDemandInterceptorFactory.addInterceptors(chain, property.ownInterceptors);
    return chain;
  }
}
